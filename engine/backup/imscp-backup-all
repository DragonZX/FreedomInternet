#!/usr/bin/perl

# i-MSCP - internet Multi Server Control Panel
# Copyright (C) 2010-2015 by internet Multi Server Control Panel
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

use strict;
use warnings;
no if $] >= 5.017011, warnings => 'experimental::smartmatch';
use FindBin;
use lib "$FindBin::Bin/..", "$FindBin::Bin/../PerlLib", "$FindBin::Bin/../PerlVendor";
use iMSCP::Debug;
use iMSCP::Bootstrapper;
use iMSCP::Execute;
use iMSCP::Dir;
use iMSCP::Ext2Attributes qw/isImmutable setImmutable clearImmutable/;
use iMSCP::Getopt;
use Servers::mta::postfix;
use File::Basename;
use POSIX qw/strftime/;

sub run
{
	return 0 unless $main::imscpConfig{'BACKUP_DOMAINS'} eq 'yes';

	my $command = {
		bzip2 => { extension => 'bz2', command => 'bzip2' },
		pbzip2 => { extension => 'bz2', command => 'pbzip2' },
		gzip => { extension => 'gz', command => 'gzip' },
		pigz => { extension => 'gz', command => 'pigz' },
		lzma => { extension => 'lzma', command => 'lzma' },
		xz => { extension => 'xz', command => 'xz' }
	};

	my $algorithm = lc($main::imscpConfig{'ZIP'});

	unless(exists $command->{$algorithm} || $algorithm eq 'no') {
		error("Backup algorithm not supported: $algorithm");
		return 1;
	}

	my ($rs, $ret) = (0, 0);
	my ($rdata, $stdout, $stderr);
	my $db = iMSCP::Database->factory();
	my $mta = Servers::mta::postfix->getInstance();
	my $canDumpDatabases = $db->can('dumpdb');

	$rdata = $db->doQuery(
		'domain_name',
		"
			SELECT
				domain_id, domain_name, domain_admin_id, allowbackup, admin_sys_name, admin_sys_gname
			FROM
				domain
			INNNER JOIN
				admin ON (admin_id = domain_admin_id)
			WHERE
				domain_status = 'ok'
			AND
				allowbackup <> ''
		"
	);

	unless(ref $rdata eq 'HASH') {
		error($rdata);
		$ret = 1;
	} else {
		for (keys %{$rdata}) {
			$ret = 0;

			my @allowbackup = split '\|', $rdata->{$_}->{'allowbackup'};

			if (@allowbackup) {
				my $homeDir = "$main::imscpConfig{'USER_WEB_DIR'}/$rdata->{$_}->{'domain_name'}";
				my $bkpDir = "$homeDir/backups";
				my $userName = $rdata->{$_}->{'admin_sys_name'};
				my $groupName = $rdata->{$_}->{'admin_sys_gname'};

				unless(-d $homeDir) { # Skip backup if home directory doesn't exist
					warning(sprintf("The %s home directory doesn't exist. Skipping backup...", $homeDir));
					next;
				} elsif(! -d $bkpDir) { # Create backups directory if doesn't already exists
					my $isProtectedHomedir = 0;

					# Unprotect parent directory if needed
					if(isImmutable($homeDir)) {
						$isProtectedHomedir = 1;
						clearImmutable($homeDir);
					}

					$rs = iMSCP::Dir->new( dirname => $bkpDir )->make(
						{ user => $userName, group => $groupName, mode => 0750 }
					);

					setImmutable($homeDir) if $isProtectedHomedir;

					if($rs) {
						$ret ||= $rs;
						next;
					}
				}

				# Remove any previous backup file
				$rs = execute("rm -fR $bkpDir/*", \$stdout, \$stderr);
				debug($stdout) if $stdout;
				error($stderr) if $stderr && $rs;

				if($rs) {
					$ret ||= $rs;
					next;
				}

				my $ext = ($algorithm ne 'no') ? ('.' . $command->{$algorithm}->{'extension'}) : '';
				my $date = strftime "%Y.%m.%d-%H-%M", localtime;

                # Backup customers webspace
				if ('dmn' ~~ @allowbackup) {
					my @cmd = (
						'tar',
						"--create",										# Create new archive
						"--directory=$homeDir",							# Change to directory
						($algorithm ne 'no')
							? "--use-compress-program=$algorithm"		# Compress archive with given program
							: '',										# No compression
						"--file=$bkpDir/$_-backup-$date.tar$ext",		# use archive file
						'--exclude=logs',								# exclude logs directory from archive
						'--exclude=phptmp',								# exclude phptmp directory from archive
						'--exclude=backups',							# exclude backup from archive/-
						'--exclude=domain_disable_page',				# exclude domain_disable_page from archive/-
						'.'												# pathname
					);

					my $rs = execute("@cmd", \$stdout, \$stderr);
					debug($stdout) if $stdout;

					# Tar exit with status 1 only if some files were changed while being read. We want ignore this.
					if($rs > 1) {
						error($stderr) if $stderr;
						error("Unable to backup $homeDir") if ! $stderr;
						$ret |= $rs;
					}

					my $file = iMSCP::File->new( filename => "$bkpDir/$_-backup-$date.tar$ext" );
					$rs = $file->mode(0644);
					$ret ||= $rs;

					$rs = $file->owner($userName, $groupName);
					$ret ||= $rs;
				}

				# Backup all customer databases
				if ($canDumpDatabases && 'sql' ~~ @allowbackup) {
					my $dbData = $db->doQuery(
						'sqld_name',
						'SELECT sqld_id, sqld_name FROM sql_database WHERE domain_id = ?',
						$rdata->{$_}->{'domain_id'}
					);
					unless (ref $dbData eq 'HASH') {
						error($dbData);
						$ret ||= 1;
						next;
					}

					for (keys %{$dbData}) {
						$rs = $db->dumpdb($_, "$bkpDir/$_.sql");

						if($rs) {
							$ret ||= $rs;
							next;
						}

						my $file = iMSCP::File->new( filename => "$bkpDir/$_.sql" );

						$rs = $file->mode(0644);
						$ret ||= $rs;

						$rs = $file->owner($userName, $groupName);
						$ret ||= $rs;

						if($algorithm ne 'no') {
							my @cmd = ($command->{$algorithm}->{'command'}, '--force', escapeShell("$bkpDir/$_.sql"));
							$rs = execute("@cmd", \$stdout, \$stderr);
							debug($stdout) if $stdout;
							error($stderr) if $stderr && $rs;
							error(sprintf('Unable to compress the %s database dump file', $_)) if $rs && ! $stderr;
							$ret ||= $rs;
						}
					}
				}

				# Backup all customer mails
				if ('mail' ~~ @allowbackup) {
					my $mailData = $db->doQuery(
						'name',
						"
							SELECT
								t1.domain_name AS name, t1.domain_id AS id, 'dmn' AS type
							FROM
								domain AS t1
							WHERE
								t1.domain_id = ?
							AND
								t1.domain_status = 'ok'
							UNION
							SELECT
								CONCAT(t1.subdomain_name, '.', t2.domain_name) AS name, t1.subdomain_id AS id,
								'sub' AS type
							FROM
								subdomain AS t1
							INNER JOIN
								domain AS t2 USING(domain_id)
							WHERE
								t1.domain_id = ?
							AND
								t1.subdomain_status = 'ok'
							UNION
							SELECT
								alias_name AS name, alias_id AS id, 'als' AS type
							FROM
								domain_aliasses
							WHERE
								domain_id = ?
							AND
								alias_status = 'ok'
							UNION
							SELECT
								CONCAT(t1.subdomain_alias_name, '.', t2.alias_name) AS name, t1.subdomain_alias_id AS id,
								'alssub' AS type
							FROM
								subdomain_alias AS t1
							INNER JOIN
								domain_aliasses AS t2 USING(alias_id)
							WHERE
								t2.domain_id = ?
							AND
								subdomain_alias_status = 'ok'
						",
						$rdata->{$_}->{'domain_id'},
						$rdata->{$_}->{'domain_id'},
						$rdata->{$_}->{'domain_id'},
						$rdata->{$_}->{'domain_id'}
					);
					unless (ref $mailData eq 'HASH') {
						error($mailData);
						$ret ||= 1;
						next;
					}

					for (keys %{$mailData}) {
						my $mailDir = "$mta->{'config'}->{'MTA_VIRTUAL_MAIL_DIR'}/$_";

						if(-d $mailDir) {
							my @cmd = (
								'tar',
								"--create",                                     # Create new archive
								"--directory=$mailDir",                         # Change to directory
								($algorithm ne 'no')
									? "--use-compress-program=$algorithm"       # Compress archive with given program
									: '',                                       # No compression
								"--file=$bkpDir/mail-$_-backup-$date.tar$ext",  # use archive file
								'.'                                             # pathname
							);

							my $rs = execute("@cmd", \$stdout, \$stderr);
							debug($stdout) if $stdout;

							# Tar exit with status 1 only if some files were changed while being read. We want ignore this.
							if($rs > 1) {
								error($stderr) if $stderr;
								error("Unable to backup $mailDir") unless $stderr;
								$ret |= $rs;
							}

							my $file = iMSCP::File->new( filename => "$bkpDir/mail-$_-backup-$date.tar$ext" );
							$rs = $file->mode(0644);
							$ret ||= $rs;

							$rs = $file->owner($userName, $groupName);
							$ret ||= $rs;
						} else {
							warning(sprintf"The %s mail directory doesn't exist. Skipping backup...", $mailDir);
						}
					}
				}
			}
		}
	}

	my @errorMessages = (getMessageByType('warn'), getMessageByType('error'));

	if(@errorMessages) {
		require iMSCP::Mail;
		iMSCP::Mail->new()->errmsg("@errorMessages");
	}

	$ret;
}

newDebug('imscp-backup-all.log');

# Parse command line options
iMSCP::Getopt->parseNoDefault(sprintf("Usage: perl %s [OPTION]...", basename($0)) . qq {

Script which backup i-MSCP customers's data.

OPTIONS:
 -v,    --verbose       Enable verbose mode.},
 'verbose|v' => sub { setVerbose(@_); }
);

my $bootstrapper = iMSCP::Bootstrapper->getInstance();
exit unless $bootstrapper->lock('/tmp/imscp-backup-all.lock', 'nowait');
$bootstrapper->boot({ norequirements => 'yes', nofail => 'yes', nolock => 'yes', config_readonly => 'yes' });

my $rs = run();
$bootstrapper->unlock('/tmp/imscp-backup-all.lock');
exit $rs;
